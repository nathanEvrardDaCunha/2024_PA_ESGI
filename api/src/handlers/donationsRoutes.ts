import express, { Request, Response } from 'express';import Stripe from 'stripe';import {	createDonation,	getAllDonation,	getDonationById,	getDonationsByUserId,	updateDonation} from '../repository/donationRepository';const donationRouter = express.Router();const stripe = new Stripe('sk_test_51PAYakGNSIKaQBU9pSy67gIi627DV10OYHHc5lr7TnZptVISScLpgqc0nQfKqA5nTo9PqourKhyUr8gdJ6eujseE00p0hZIgZ2');donationRouter.get('/', async (req: Request, res: Response) => {	try {		const donations = await getAllDonation();		res.status(200).json(donations);	} catch (error) {		console.error('Error fetching donations:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});donationRouter.get('/:id', async (req: Request, res: Response) => {	try {		const donation = await getDonationById(req.params.id);		if (!donation) {			return res.status(404).json({ error: 'Donation not found' });		}		res.status(200).json(donation);	} catch (error) {		console.error('Error fetching donation by ID:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});donationRouter.get('/user/:userId', async (req: Request, res: Response) => {	try {		const userId = req.params.userId;		const userDonations = await getDonationsByUserId(userId);		if (userDonations.length === 0) {			return res.status(404).json({ error: 'No donations found for this user' });		}		res.status(200).json(userDonations);	} catch (error) {		console.error('Error fetching donations by user ID:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});donationRouter.post('/', async (req: Request, res: Response) => {	try {		const newDonation = await createDonation(req.body);		res.status(201).json(newDonation);	} catch (error) {		console.error('Error creating donation:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});donationRouter.patch('/:id', async (req: Request, res: Response) => {	try {		const { id } = req.params;		const updatedDonation = await updateDonation(id, req.body);				if (!updatedDonation) {			return res.status(404).json({ error: 'Donation not found' });		}				res.status(200).json(updatedDonation);	} catch (error) {		console.error('Error updating donation:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});donationRouter.post('/create-checkout-session', async (req: Request, res: Response) => {	const { amount, userId, type, paymentMethod, message, renewalFrequency } = req.body;		try {		const session = await stripe.checkout.sessions.create({			payment_method_types: ['card'],			line_items: [				{					price_data: {						currency: 'eur',						product_data: {							name: 'Donation',							metadata: {								userId,								type,								paymentMethod,								message,								renewalFrequency: renewalFrequency.toString(),							},						},						unit_amount: amount,					},					quantity: 1,				},			],			mode: 'payment',			success_url: 'http://localhost:3001/',			cancel_url: 'http://localhost:3001/',		});				console.log('Checkout session created successfully:', session.id);		res.status(200).json({ id: session.id });	} catch (err) {		console.error(err);		res.status(500).json({ error: 'An error occurred while creating the checkout session' });	}});export default donationRouter;