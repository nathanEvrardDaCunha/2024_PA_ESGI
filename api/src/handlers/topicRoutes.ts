import express, {Request, Response} from "express";import {createTopic, getAllTopic, getTopicById, updateTopic} from "../repository/topicRepository";const topicRouter = express.Router();topicRouter.get('/', async (req: Request, res: Response) => {	//TODO : Check all argument validation	//TODO : Write the service rules		try {		const topics = await getAllTopic();		res.status(200).json(topics);	} catch (error) {		console.error('Error fetching topics:', error);		res.status(500).json({error: 'Internal Server Error'});	}});topicRouter.get('/:id', async (req: Request, res: Response) => {	//TODO : Check all argument validation	//TODO : Write the service rules		try {		const topic = await getTopicById(req.params.id);		if (!topic) {			return res.status(404).json({ error: 'Topic not found' });		}		res.status(200).json(topic);	} catch (error) {		console.error('Error fetching topic by ID:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});topicRouter.post('/', async (req: Request, res: Response) => {	//TODO : Check all argument validation	//TODO : Write the service rules		try {		const newTopic = await createTopic(req.body);		res.status(201).json(newTopic);	} catch (error) {		console.error('Error creating topic:', error);		res.status(500).json({error: 'Internal Server Error'});	}});topicRouter.patch('/:id', async (req: Request, res: Response) => {	// TODO: Check all argument validation	// TODO: Write the service rules		try {		const { id } = req.params;		const updatedTopic = await updateTopic(id, req.body);				if (!updatedTopic) {			return res.status(404).json({ error: 'Topic not found' });		}				res.status(200).json(updatedTopic);	} catch (error) {		console.error('Error updating topic:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});export default topicRouter;