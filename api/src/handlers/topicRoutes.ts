import express, {Request, Response} from "express";import {createTopic, getAllTopic, getTopicById, submitVote, updateTopic} from "../repository/topicRepository";import {ActivityRequest, ActivityValidation} from "./validators/activity-validation";import {TopicRequest, TopicValidation} from "./validators/topic-validation";const topicRouter = express.Router();topicRouter.get('/', async (req: Request, res: Response) => {	//TODO : Check all argument validation	//TODO : Write the service rules		try {		const topics = await getAllTopic();		res.status(200).json(topics);	} catch (error) {		console.error('Error fetching topics:', error);		res.status(500).json({error: 'Internal Server Error'});	}});topicRouter.get('/:id', async (req: Request, res: Response) => {	//TODO : Check all argument validation	//TODO : Write the service rules		try {		const topic = await getTopicById(req.params.id);		if (!topic) {			return res.status(404).json({ error: 'Topic not found' });		}		res.status(200).json(topic);	} catch (error) {		console.error('Error fetching topic by ID:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});topicRouter.post('/', async (req: Request, res: Response) => {	//TODO : Check all argument validation	//TODO : Write the service rules	const { error, value } = TopicValidation.validate(req.body);	if (error) {		// Si les données ne sont pas valides, renvoyez une réponse 400 Bad Request avec le message d'erreur		return res.status(400).json({ error: error.details[0].message });	}	const topicRequest = value as TopicRequest;	try {		const newTopic = await createTopic(topicRequest);		res.status(201).json(newTopic);	} catch (error) {		console.error('Error creating topic:', error);		res.status(500).json({error: 'Internal Server Error'});	}});topicRouter.patch('/:id', async (req: Request, res: Response) => {	// TODO: Check all argument validation	// TODO: Write the service rules		try {		const { id } = req.params;		const updatedTopic = await updateTopic(id, req.body);				if (!updatedTopic) {			return res.status(404).json({ error: 'Topic not found' });		}				res.status(200).json(updatedTopic);	} catch (error) {		console.error('Error updating topic:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});topicRouter.post('/:topicId/vote', async (req: Request, res: Response) => {	try {		const { topicId } = req.params;		const { choiceId, personId } = req.body; // Assurez-vous de recevoir personId dans le corps de la requête		const result = await submitVote(personId, topicId, choiceId);		res.json(result);	} catch (error) {		console.error('Failed to submit vote:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});topicRouter.post('/vote', async (req, res) => {	try {		const { personId, topicId, choiceId } = req.body;		const vote = await submitVote(personId, topicId, choiceId);		res.json(vote);	} catch (error) {		res.status(500).json({ error: 'Error submitting vote' });	}});export default topicRouter;