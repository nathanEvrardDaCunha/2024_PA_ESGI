import express, {Request, Response} from "express";import {	createAssembly,	getAllAssembly,	getAssemblyById,	updateAssembly,	updateAssemblyWithPersons} from "../repository/assemblyRepository";import {GeneralAssemblyRequest, GeneralAssemblyValidation} from "./validators/general-assembly-validation";import {PersonRequest} from "./validators/person-validation";const assemblyRouter = express.Router();assemblyRouter.get('/', async (req: Request, res: Response) => {	//TODO : Check all argument validation	//TODO : Write the service rules		try {		const assemblies = await getAllAssembly();		res.status(200).json(assemblies);	} catch (error) {		console.error('Error fetching assemblies:', error);		res.status(500).json({error: 'Internal Server Error'});	}});assemblyRouter.get('/:id', async (req: Request, res: Response) => {	//TODO : Check all argument validation	//TODO : Write the service rules		try {		const assembly = await getAssemblyById(req.params.id);		if (!assembly) {			return res.status(404).json({ error: 'Assembly not found' });		}		res.status(200).json(assembly);	} catch (error) {		console.error('Error fetching assembly by ID:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});assemblyRouter.post('/', async (req: Request, res: Response) => {	try {		// Validez les données de la requête		const { error, value } = GeneralAssemblyValidation.validate(req.body);		if (error) {			// Si les données ne sont pas valides, renvoyez une réponse 400 Bad Request avec le message d'erreur			return res.status(400).json({ error: error.details[0].message });		}		const generalAssemblyRequest = value as GeneralAssemblyRequest;		// Les données sont valides, créez l'assemblée		const newAssembly = await createAssembly(generalAssemblyRequest);		res.status(201).json(newAssembly);	} catch (error) {		console.error('Error creating assembly:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});assemblyRouter.post('/:assemblyId/link-people', async (req: Request, res: Response) => {	const { assemblyId } = req.params;	const { personIds } = req.body;	try {		const updatedAssembly = await updateAssemblyWithPersons(assemblyId, personIds);		res.status(200).json(updatedAssembly);	} catch (error) {		console.error('Failed to link people to assembly:', error);		res.status(500).send('Failed to link people to assembly.');	}});assemblyRouter.patch('/:id', async (req: Request, res: Response) => {	// TODO: Check all argument validation	// TODO: Write the service rules		try {		const { id } = req.params;		const updatedAssembly = await updateAssembly(id, req.body);				if (!updatedAssembly) {			return res.status(404).json({ error: 'Assembly not found' });		}				res.status(200).json(updatedAssembly);	} catch (error) {		console.error('Error updating assembly:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});export default assemblyRouter;