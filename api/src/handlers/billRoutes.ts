import express, {Request, Response} from "express";import {createBill, getAllBill, getBillById, updateBill} from "../repository/billRepository";const billRouter = express.Router();billRouter.get('/', async (req: Request, res: Response) => {	//TODO : Check all argument validation	//TODO : Write the service rules		try {		const bills = await getAllBill();		res.status(200).json(bills);	} catch (error) {		console.error('Error fetching bills:', error);		res.status(500).json({error: 'Internal Server Error'});	}});billRouter.get('/:id', async (req: Request, res: Response) => {	//TODO : Check all argument validation	//TODO : Write the service rules		try {		const bill = await getBillById(req.params.id);		if (!bill) {			return res.status(404).json({ error: 'Bill not found' });		}		res.status(200).json(bill);	} catch (error) {		console.error('Error fetching bill by ID:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});billRouter.post('/', async (req: Request, res: Response) => {	//TODO : Check all argument validation	//TODO : Write the service rules		try {		const newBill = await createBill(req.body);		res.status(201).json(newBill);	} catch (error) {		console.error('Error creating bills:', error);		res.status(500).json({error: 'Internal Server Error'});	}});billRouter.patch('/:id', async (req: Request, res: Response) => {	// TODO: Check all argument validation	// TODO: Write the service rules		try {		const { id } = req.params;		const updatedBill = await updateBill(id, req.body);				if (!updatedBill) {			return res.status(404).json({ error: 'Bill not found' });		}				res.status(200).json(updatedBill);	} catch (error) {		console.error('Error updating bill:', error);		res.status(500).json({ error: 'Internal Server Error' });	}});export default billRouter;